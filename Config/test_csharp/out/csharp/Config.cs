// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version: 
using System;
using System.Collections.Generic;

namespace main
{ 		
	public partial class MyData : tabtoy.ITableSerializable
	{ 
		public Int32 ID = 0;
		public string Name = string.Empty;
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x20000:
                	{
						reader.ReadInt32( ref ID );
                	}
					break;
					case 0x80001:
                	{
						reader.ReadString( ref Name );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	

	// Combine struct
	public partial class Table
	{ 
		// table: MyData
		public List<MyData> MyData = new List<MyData>(); 

		// Indices
		
		
		

		public void ResetData( )
		{   
			MyData.Clear();  
				
		}
		
		public void Deserialize( tabtoy.TableReader reader )
		{	
			reader.ReadHeader();

			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
				if (mamaSaidTagNameShouldBeLong == 0x6f0000)
				{
                    var tabName = string.Empty;
                    reader.ReadString(ref tabName);
					switch (tabName)
					{ 
						case "MyData":
						{
							reader.ReadStruct(ref MyData);	
						}
						break;
						default:
						{
							reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
						}
						break;
					}
				}
			}
		}

		public void IndexData( string tabName = "")
		{ 
		}
		
	}
}
