syntax = "proto3";
package game_proto;

option go_package = "proto";

// 收益类型
enum GainType {
	GOLD = 0;		// 金币 最终值
	MATERIAL = 1;	// 材料 增量
	SKILL = 2;		// 技能 增量
	ROLE_EXP = 3;	// 经验 最终值(废弃不用)
	ROLE_LEVEL = 4;	// 等级 最终值(废弃不用)
	CHAR = 5;		// 英雄 增量
	EQUIP = 6;		// 装备 增量
	CURRENCY = 7;	// 货币 增量
	SUNDRY = 8;		// 杂项 增量
	MAIL = 9; 		// 新新邮件 增量
	NPC =10 ; 		// 新NPC 增量
	INTERACTION=11;	// 交互 增量
	BOX = 12; 		// 宝箱 增量
	
	ITEM = 15; //以后的通用道具
}

// 道具类型(背包分组)
enum ItemType{
	None = 0;		// 未知
	Equip = 1;		// 装备
	Material = 2;	// 材料
	Currency = 3;	// 货币
	Skill = 4;		// 技能
	Food = 5;		// 食物（目前先算作其他）
	Hero = 6;		// 英雄（不进行背包保留）
	Box = 7;		// 宝箱（子类型1为时间货币箱 2为直接生成箱 3为掉落生成箱）
	Other = 8;		// 杂物
}

// 装备部位
enum EquipPos{
	Blank=0;		// 0 空
	Weapon=1;		// 1 武器
	Head = 2;		// 2 头(预留)
	Clothes = 3;	// 3 衣服(衣服)
	Trousers = 4;	// 4 裤子(护腿)
	Jewelry = 5;	// 5 饰品(腰部挂件)
	Necklace = 6;	// 6 项链(胸部挂件)
	Hand = 7;		// 7 护腕(腕部挂件)
	Leg = 8;		// 8 护腿(腿部)
	Max = 9;		// 装备格子总数
}

// 技能品质
enum SkillQuality{
	SkillMin = 0;	// 下限
	Write = 1;		// 白
	Green = 2;		// 绿
	Blue = 3;		// 蓝
	Purple = 4;		// 紫
	Gold = 5;		// 金
	SkillMax = 6;	// 上限
}

// 任务状态
enum TaskState{
	TASK_STATE_NEW = 0;  //新任务
	TASK_STATE_RUN = 1;  //正在进行
    TASK_STATE_RWD = 2;  //任务完成 待领取奖励
	TASK_STATE_END = 3;  //奖励领取完成
}

// 获取来源
enum GainRaSource {
	RA_UNKNOW          = 0;
	RA_CMD             = 1;  //GM命令
	RA_ONLINE          = 2; // 登录送
	RA_CREATE          = 3;  // 创建角色
	RA_COLLECT         = 4;  // 收集
	RA_COMPANION       = 5;  // 系统作战单元
	RA_SETSKILL        = 6;  // 设置技能
	RA_UPSKILL         = 7;  // 升级技能
	RA_MAIL            = 8;  // 邮件获得
	RA_EQUIP           = 9;  // 装备占用
	RA_Boss            = 10; // boss战掉落
	RA_FORGE           = 11; // 锻造消耗
	RA_FORGE_BACK      = 12; // 锻造失败回叠
	RA_INTERACTION     = 13; // 交互获得
	RA_ROLL_SKILL      = 14; // 抽技能
	RA_Despose         = 15; // 分解
	RA_SEASON          = 16; // 赛季
	RA_MAINTASK        = 17; // 主线任务奖励
	RA_BRANCHTASK  	   = 18; // 支线任务奖励
	RA_ENHANCE     	   = 19; // 觉醒
	RA_USEITEM         = 20; // 使用礼包
	RA_COLLECT_OFFLINE = 21; // 离线收集
    RA_FRIEND_LV_UP       = 22;  // 伙伴升级
    RA_FRIEND_SKILL_LV_UP = 23;  // 伙伴技能升级
    RA_COMPOSE            = 24;  // 装备合成
    RA_BATTLESTAR         = 25;  // 星级
    RA_THIEVES           = 26;  //盗宝贼
	RA_FASTBATTLE        = 27;  //快速战斗
	RA_PUT_OFF_AND_ON    = 28;  //脱穿装备
	RA_SEASON_AWARD_RACE       = 29; // 赛季-竞赛期
	RA_SEASON_AWARD_BP_FREE    = 30; // 赛季-休赛期-免费
	RA_SEASON_AWARD_BP_PAID    = 31; // 赛季-休赛期-付费
	RA_SEASON_PAY_BP    	   = 32; // 赛季-休赛期-付费-购买战令
	RA_SEASON_PAY_UP_BP    	   = 33; // 赛季-休赛期-付费-升级
	RA_MAINHERO_ACTIVATE_SKILL_COSTITEM=34;// 主角技能激活提升消耗对应道具
	RA_FASTSEARCH = 35;//快速探索
	RA_IMPRINT_LEVELUP = 36;//印记升级
    RA_LEVEL_OPEN = 37; // 等级开放
	RA_MAIN_LV_UP= 38; // 主角升级
	RA_TEAM_EQUIP_POS_LVUP = 39;//槽位装备位置升级
	RA_EQUIP_EXCHANGE_BUY = 40;//装备兑换
	RA_EQUIP_EXCHANGE_REFRESH = 41;//装备兑换刷新
	RA_SHOP_BUY = 42;//商店购买
	RA_KATA_BUY = 43;//咔嗒牌购买
	RA_KATA_REFRESH = 44;//咔嗒牌刷新
	RA_KATA_AUTO_MERGE = 45;//咔嗒牌自动合成
	RA_ROLL_SKILL_TEN = 46;//十连抽(单抽在14)
    RA_KATA_STORE = 47;//咔嗒牌寄存
}

//战斗类型
enum BATTLE_TYPE
{
    BATTLE_TYPE_NONE     = 0;
    BATTLE_PVE           = 1;//关卡
    BATTLE_THIEF         = 2;//盗宝贼
    BATTLE_CHECK_ATK     = 3;//类型为欠揍盗宝贼(攻击力检测)
    BATTLE_MONSTER_GROUP = 4;//类型为怪物狂潮
    BATTLE_CHECK_DEF     = 5;//类型为神之试炼(防御力检测)
}

// 值是最终值
message GainInfo {
	GainType dt=1; // 那个数据
	int32 dtInt=2; // int类型值
	int64 dtLong=3; // int64类型值
	string dtStr=4; // str类型值
	CharInfo char = 5; // char
	CollectInfo cll = 6;
	repeated EquipInfo equips = 7; // 装备
	repeated MaterialInfo materials = 8; // 材料
	repeated CurrencyInfo currencys = 9; // 货币
	repeated SkillInfo skills = 10; //技能类型
	repeated SundryItem sundryItems = 11; //杂项道具
	MailInfo mail=12; // 邮件
	NpcInfo npc=13; // NPC
	InteractionInfo interaction=14;// 交互
	GainRaSource raSource = 15; //来源
	repeated SundryItem boxItems = 16; //箱子
	repeated ItemInfo items = 17;
}

message GainInfoNtf {
	repeated GainInfo datas=1; // 属性改变集合
}

message LoginGameReq
{
	string token=1;// 认证数据
	bool relogin=2;

	// 下面是日志需要的一堆数据
	int32 game_id = 3; 		// APPID
	int32 channel_id = 4;	// 渠道ID
	int32 plat_id = 5; 		// ios:2/android:1
	string device_id = 6;	// 设备号
	string client_version=7;// 客户端版本
	string os = 8;			// 操作系统版本
	string phone_model = 9; // 品牌型号
	string operator = 10;	// 运营商
	string network = 11;	// WIFI/2G/3G/4G/5G
	string cpu = 12;		// cpu类型_频率_核数
	string Memory = 13;		// 内存，单位M
	string wanIp=14; // 外网IP
}

message LoginGameAck
{
	bool createRole = 1; // 是不是要创建角色
	int64 ForbiddenBeginTime=2;		// 禁言开始时间
	int64 ForbiddenEndTime=3;		// 禁言结束时间
	string ForbiddenMsg=4;			// 禁言内容
}

message LoginSwtichNtf
{
	string token=1; // 数据迁移,刷新token
}

// 一般列表展示的
message RoleResume {
	string roleName=1;	// 角色名
	int32 level=2;		// 角色等级
	int32 heroId=3;		// 所选英雄Id，或者自定义头像ID, 用于ICON显示.
}

// 点击列表查看详细
message RoleBoardInfo {
}

message RoleInfoNtf
{
	int64 roleId=1; // 角色id
	string roleName=2;// 角色名
	int32 characterId=3;
	int64 exp=4; // 废弃不用
	int32 level=5; // 废弃不用
	string customInfo=6;	// 自定义捏脸信息
	int32 proceedsLevel = 7; // 收益等级
	int32 pvHasPlay = 8; //  PV已经播放
}

message SkillInfo {
	int32 Id = 1; //技能ID
	int32 cfgId = 2; //技能配置ID
	int32 count = 3; //技能数量
	//int32 exp = 4; //技能所包含的经验值
	//int32 lv = 5; //技能等级-客户端亦可根据经验进行计算
	int32 package = 6;//当前所在背包
	int32 changeNum = 7;
}

message MaterialInfo {
	int32 Id = 1; //物品ID
	int32 cfgId = 2; //物品配置ID
	int32 count = 3; //物品数量
	int32 PreUseTime = 4; //上次使用时间
	int32 package = 5;//当前所在背包
	int32 changeNum = 6;
}

// 锻造精致特殊属性
message EquipForgeAttr{
	int32 attrId=1;		// 锻造属性表 ForgeAttr.Id
	int32 attrVal=2;	// 锻造附加值 ForgeAttr.Val
}

// 装备锻造buff记录
message EquipForgeBuff{
	int32 buffId=1;	// 锻造buffid
	int32 timer=2;	// 锻造buff时长
	int32 level=3;	// 父技能等级
	int32 maxLevel=4;//父技能最大等级
	int32 validCnt=5;// 有效执行次数
	int64 startTS=6;	// 创建时间
}

// 装备锻造 Attr = Base * (1 + forgePct) + value
message EquipForge{
	int32 slot=1;		// 槽位
	int32 forgePct=2;	// 锻造百分比
	repeated EquipForgeAttr attr=3; // 附加属性，最多三个
}

// 装备锻造中断缓存,用于断线重连恢复
message EquipForgeRec{
	int32 equipId=1;	// 装备ID
	int32 slot=2;		// 槽位
	int32 progress=3;	// 进度
	int32 quality=4;	// 精致
	int32 durability=5; // 耐久
	int32 energy=6;		// 制作力
	uint32 state = 7;	// 状态ID
	int64 startTS=8;	// 起始时间，用于超时，例如半小时
	EquipForge equipForge=9;			// 装备锻造缓存
	repeated EquipForgeBuff buffs=10;	// buff缓存
	repeated int32 attrSteps=11;		// 精致索引,当前精致对应索引
	repeated EquipForgeAttr curAttrs=12;// 精致已经生成属性
}

// 装备锻造结果
message EquipForgeRes{
	int32 progress=3;	// 进度
	int32 quality=4;	// 精致
	int32 durability=5; // 耐久
	int32 energy=6;		// 制作力
	uint32 state = 7;	// 状态ID
	EquipForge equipForge=9;			// 装备锻造缓存
	repeated EquipForgeBuff buffs=10;	// buff缓存
}

// 装备信息
message EquipInfo{
	int32 Id = 1;	// 装备ID
	int32 cfgId = 2;// 装备配置ID,引用Property模板ID
	int32 stack = 3;// 装备堆叠个数
	int32 level = 4;// 装备等级
	repeated EquipForge equipForge=5; // 装备锻造信息
	int32 upperRate = 6; //属性衰减率 万分比
	int32 package = 7;//当前所在背包
	int32 changeNum = 8;
}

message CurrencyInfo {
	int32 Id = 1; //货币ID
	int32 cfgId = 2; //货币配置ID
	int32 count = 3; //物品数量
	int32 package = 4;//当前所在背包
	int32 changeNum = 5;
}

message SundryItem{
	int32 Id = 1;		// 道具唯一ID
	int32 cfgId = 2;	// 配置ID
	int32 count = 3; 	// 数量
	int32 CreateTime = 4; // 创建时间，防止策划扩展食物效期
	int32 package = 5;//当前所在背包
	int32 changeNum = 8;
}

message SkillSlot {
	int32 level = 1;
	int32 exp =2;
	int32 skillId=3; // RoleSkillNtf
}

enum CharType {
	CHARTYPE_UNKNOWN = 0;  // 类型未知
	CHARTYPE_PLAYER = 1;  // 玩家类型
	CHARTYPE_MONSTER = 2;  // 怪物类型
	CHARTYPE_SUMMON = 3;  // 召唤物类型
	CHARTYPE_NPC = 4;  // NPC类型
}

message CharBaseInfo {
	int32 Id = 1;
	int32 cfgId = 2;
	CharType charType = 3; //请根据此类型到相应表中依cfgId查询配置
	int32 bId = 4; // battleId
	int32 maxHp = 5;
	int32 hp = 6;
	int32 oldCfgId = 7;
}

enum AttrIdx {
	ATTR_TYPE_NONE = 0;
	//一级属性
	ATTR_TYPE_POW =	1011; //	力量
	ATTR_TYPE_QUIK =1012; //	敏捷
	ATTR_TYPE_SMA=	1013; //	智力
	//二级属性
	ATTR_TYPE_HPMAX = 2000; //	生命
	ATTR_TYPE_HP = 	2001; //	生命
	ATTR_TYPE_ATK =	2002; //	物攻
	ATTR_TYPE_DEF =	2003; //	物防
	ATTR_TYPE_MATK =	2004; //	魔攻
	ATTR_TYPE_MDEF =	2005; //	魔防
	ATTR_TYPE_CURE =	2006; //	治愈

	ATTR_TYPE_HPMAX_PERCENT = 2100; //	生命加成百分比
	ATTR_TYPE_HP_PERCENT = 	2101; //	生命加成百分比
	ATTR_TYPE_ATK_PERCENT =	2102; //	物攻加成百分比
	ATTR_TYPE_DEF_PERCENT =	2103; //	物防加成百分比
	ATTR_TYPE_MATK_PERCENT =	2104; //	魔攻加成百分比
	ATTR_TYPE_MDEF_PERCENT =	2105; //	魔防加成百分比
	ATTR_TYPE_CURE_PERCENT =	2106; //	治愈加成百分比
	//三级属性
	ATTR_TYPE_PHYCRI =	3001; //	物理暴击
	ATTR_TYPE_NCRI =	3002; //	免暴
	ATTR_TYPE_DODG =	3003; //	闪避
	ATTR_TYPE_HIT =	3004; //	命中
	ATTR_TYPE_PHYDCRI =	3005; //	物理暴击伤害
	ATTR_TYPE_DRED =	3006; //	物伤减免
	ATTR_TYPE_MRED =	3007; //	法伤减免
	ATTR_TYPE_DPEN =	3008; //	物理穿透
	ATTR_TYPE_MPEN =	3009; //	法术穿透
	ATTR_TYPE_BLOCK=	3010; //	格挡
 	ATTR_TYPE_SMASH=	3011; //	破击
	ATTR_TYPE_ATKSPD=	3012; // 	攻速
	ATTR_TYPE_MAGCRI=	3013; //	魔法暴击
	ATTR_TYPE_MAGDCRI=	3014; //	魔法暴击伤害
	ATTR_TYPE_NEGPHYDEF=	3015; //	忽视物理防御
	ATTR_TYPE_NEGMAGDEF=	3016; //	忽视魔法防御
	ATTR_TYPE_PHYCRI_RATIO =	3017; //	物理暴击率
	ATTR_TYPE_MAGCRI_RATIO =	3018; //	魔法暴击率
    
	//隐藏属性
	ATTR_TYPE_SPD =	4001; //	急速
	ATTR_TYPE_SUC =	4002; //	吸血等级
	ATTR_TYPE_ADDS =	4003; //	护盾提高
	ATTR_TYPE_ADDC =	4004; //	治疗提高
	ATTR_TYPE_ATEN =	4005; //	坚韧强化
	ATTR_TYPE_AWIL =	4006; //	意志强化
	ATTR_TYPE_ASYM =	4007; //	症状强化
	ATTR_TYPE_ALLSHIELD = 4008;   //	全抵抗护盾
	ATTR_TYPE_RTEN =	4009; //	坚韧消减
	ATTR_TYPE_DADD =	4010; //	物理受伤增加
	ATTR_TYPE_MADD =	4011; //	魔法受伤增加
	ATTR_TYPE_ATKADD =	4012; //	物理攻击增加
	ATTR_TYPE_MATKADD =	4013; //	魔法攻击增加
	ATTR_TYPE_SUBC =        4014; //        治疗降低
	ATTR_TYPE_PHYSHIELD=	4015; //	物理抵抗护盾
	ATTR_TYPE_MAGSHIELD=	4016; //	魔法抵抗护盾
	ATTR_TYPE_RECOVERANGER= 4017; // 	怒气恢复值
	ATTR_TYPE_HURT_ADD =	4018; //	伤害增加
	ATTR_TYPE_INJURE_ADD =	4019; //	受伤增加
	
}

message Property{
	AttrIdx id = 1;// 属性id
	int32   num = 2;// 属性值
}
message PropertyList{
	map<int32, Property> attributes = 1;
	map<int32, PropertyList> jobAttributes = 2;
}

message SecondSkill{
	int32 skillslot = 1;	// 第二技能栏位索引
	int32 skillid = 2;	// 第二技能模板ID
	int32 skilltype = 3;	// 第二技能类型 1主动技能 2大招
	int32 skilllv = 4;	// 第二技能等级
	int32 skillexp = 5;     // 第二技能经验
}


message CharInfo {

	CharBaseInfo base = 1;
	repeated SkillInfoEx mainhero_activeskills = 2;
	PropertyList Attrs = 3; //以ATTR_TYPE为顺序的属性列表 [NONE,HPMAX,ATK,DEF...]
	repeated EquipInfo equips = 4; // 装备列表
	bool pv=5; // 是不是播放过pv
	int32 pageIdx=6; // 当前选择技能页
	int32 enhanceTimes = 7; //已经进行过的觉醒次数
	PropertyList propAdd = 8;//属性加点
	repeated SecondSkill secondskills = 9;//第二技能
	int32 level = 10;//等级
	bool follow = 11;//是否跟随
	int64 exp = 12;
	repeated uint32 imprints = 13;//印记装备
	uint32 imprintLevel = 14;//印记等级
}

// 新加入剧情展示
message CharPvOpenReq {
	int32 id = 1; // charID
}

message CharPvOpenAck {
}

message TeamInfo {
	int32 teamType=1;
	repeated int32 heros=2;
}

message RoleCharNtf
{
	repeated CharInfo chars =1;
	repeated TeamInfo teams=2;// 队伍信息，战斗玩法0:挑战首领
}

message RoleSkillNtf
{
	repeated SkillInfo skills=2;
}

message ItemInfo
{
	int32 cfgId =1; //模板ID
	int32 count = 2; //数量
	int32 type = 3; //类型 注意这个不是ItemType 是用来区分掉落来源用的

	int32 Id = 4;		// 道具唯一ID
	int32 package = 5;//当前所在背包
	int32 changeNum = 6;
}

message RolePackageNtf
{
	repeated EquipInfo equips=1;
	repeated MaterialInfo materials=2;
	repeated CurrencyInfo currencys=3;
	repeated SkillInfo skills=4;
	repeated SundryItem sundryItems=5;
	repeated SundryItem boxItems=6;
	repeated ItemInfo items = 7;
}

message DropTimeInfo {
	uint32 cid = 1; //掉落id 对应IdleDrop表中的序列
	int64 preDropTime = 2; //上次掉落的unix时间
	int32 hasCollectNum = 3; //已经掉落的次数
}

message CollectInfo
{
	int64 preCollectTime = 1; //上次领取暂存箱时间
	int64 expDropTime = 3; //上次掉落经验的时间
	repeated ItemInfo items= 4; // 道具
	repeated DropTimeInfo infos= 5; //掉落包时间序列
	GainInfoNtf gain = 6;
}


message RoleSceneNtf
{
	int32 levelId=1;// 关卡id
	//CollectInfo cll = 2;
	bool finishAllLevel=3;

	bool needbossReward=4;// 是不是又boss奖励没领
}

message NpcInfo
{
	int32 id = 1;// 唯一id
	int32 cfgId =2; //npcID
	int64 exp = 3; // 好感度经验
	int32 lvl = 4; //好感度等级
	bool pv= 5;// 是不是播过动画
}

message RoleNpcNtf
{
	repeated NpcInfo npcs=1;
}

message LoginEndNtf
{
	int64 svrTime=1; // 服务器时间
	string clientVer =2; // 客户端版本号
}

// 在线热更
message NewClientVerNtf
{
	string clientVer =1; // 客户端版本号
}

message CreateRoleReq
{
	string roleName=1; // 角色名
	int32 characterId=2;
	string face=3;	//
}

message CreateRoleAck
{
}


//--------------------7.15----------------------
message SetRoleNameReq
{
	string roleName=1; // 角色名
}

message SetRoleNameAck
{
}

message DelChatMsgNtf
{
	int64 roleid=1; // 可以为0：不清
	string notice = 2 ;// 删除公告
}

//----------------------------------------------

// 场景角色
message SceneRole {
	int64 roleId=1;
	string roleName=2;
	string avatar = 3;	// player表id
	int32 roleLevel = 4; // 玩家等级

	repeated BattleHero heros=5;
}

// 刷新场景
message SceneRoleReq
{

}

//每次刷20个，显示从里面拿，拿完了刷！！
message SceneRoleAck
{
	repeated SceneRole roles=1;
}

message GCommandReq {
	string cmd=1; // 命令
}

message GCommandAck {
}


enum CollectType {
	COL_TYPE_ONLINE=0;		// 在线奖励
	COL_TYPE_OFFLINE=1;		// 离线奖励
	COL_TYPE_TASK=2;        // 任务奖励
}

// 打开箱子
message CollectOpenReq {
	CollectType colt = 1; // 领取箱子的类型 0 在线 1 离线
}

message CollectOpenAck {
	CollectInfo cll = 1;
	int32 offlineQuestNum = 2; //离线期间完成了多少任务

	int32 sceneProc = 3; //当前的地图玩家进度 同SceneProcAck内proc
}

// 收取
message CollectReq {
	CollectType colt = 1;		// 领取模式 CollectType 的位掩码,可同时领取多种类型暂存箱物品
}

message CollectAck {
	CollectInfo cll = 1;
}

// 上报杀怪收取
message KillCollectReq {
	int32 killCount = 1; //杀怪数量
}
message KillCollectAck {
	CollectInfo cll = 1; //物品掉落信息(作废)
	repeated ItemInfo items = 2; //领取到的任务奖励
}

message SkillInfoEx {
	int32 skillId = 1;
	int32 skillLv = 2;
	int32 skillExp = 3;
}

// 请求解锁主角技能
message UnlockMainHeroSkillReq{
	int32 skillId = 1; // 新获得的技能ID
}

// 通知解锁主角技能
message UnlockMainHeroSkillNtf{
	repeated SkillInfoEx skill = 1;
}

// 装备主角技能
message SetSkillReq {
	int32 skillId = 1; // 主角=技能id,非主角=页idx,兼容提升
	int32 idx = 2; // 槽位1-4
}

message SetSkillAck {
	SkillInfoEx skill = 1;
	int32 idx = 2; // 槽位1-4
}

// 交换主角技能
message SkillPosReq {
	int32 srcIdx = 1; //槽位1-4
	int32 destIdx = 2; //槽位1-4
}

message SkillPosAck {
	SkillInfoEx srcSkill = 1;
	SkillInfoEx DstSkill = 2;

}

// 技能升级
message SkillUpgradeReq {
	int32 skillCid = 1; //需要升级的技能的cid
	repeated ItemInfo materials = 2; // 材料
}

message SkillUpgradeAck {
	SkillInfoEx skill = 1; //升级后的技能状态
}

// 角色个人名片
message RoleBoardReq {
	int64 roleId=1;
}

message RoleBoardAck {
	RoleBoardInfo inf=1;
}

// 好友信息
message FriendInfo {
	int64 roleId=1;
	int64 flag = 2;		//1关注，2粉丝
	RoleResume inf = 3;
}

// 列表
message RoleFriendNtf {
	repeated FriendInfo infs=1;
}

// 好友
message FriendAddReq {
	int64 roleId=1;
}

message FriendAddAck {

}

// 删除
message FriendDelReq {
	int64 roleId=1;
}

message FriendDelAck {

}

// 添加、删除广播
message FriendMdNtf {
	int32 op=1; // 0 删除,1 添加
	FriendInfo inf=2;
}

// 好友刷新
message FriendReloadReq {
	int64 roleId=1;
}

message FriendReloadAck {
}

// 好友推荐
message FriendRecommendReq {
	int64 roleId=1;
}

message FriendRecommendAck {
	repeated FriendInfo infs=1;
}

message MailInfo {
	int32 id =1;
	string title=2;
	string addresser=3;// 发件人
	string body=4; // base64过的有可能有特殊字符
	repeated ItemInfo items=5; // 附件列表
	int64 dateTime=6;  // 发送时间

	bool opened=7; // 有没有看过
	bool atched=8; // 有没有领过附件
	bool marked=9; // 标记

	int32 tempId=10;// 邮件模板，走多语言
	repeated string tempParams=11; // 模板参数

	int64 markDel=12; // 取消关注时间戳，隔天才能删除
	int32 mailId=13; // 全局唯一id
	int32 act = 14;
	string sub_reason = 15;
}

message MailInfoNtf {
	repeated MailInfo mails=1; // 邮件列表
}

message OpenMailReq {
	int32 id=1; // id
}

message OpenMailAck {
}

message MailAtchReq {
	int32 id=1; // id >0 用id,否则批量领取
}

message MailAtchAck {
	repeated int32 ids=1;
	bool allOk=2;// 是不是都成功
}

// 两种方式
message DelMailReq {
	int32 id=1; // id >0 用id,否则删除已读
}

message DelMailAck {
	repeated MailInfo mails=1; // 邮件列表
}

message MarkMailReq {
	int32 id=1; // id
}

message MarkMailAck {
}

message EquipOnReq{
	int32 heroId=1;		// 英雄ID
	int32 equipPos=2;	// 装备位置ID
	int32 equipId=3;	// 装备实例ID
}

message EquipOnAck {
	int32 realEquipId=1; // 最终装上装备
}

message EquipOffReq{
	int32 heroId=1;		// 英雄ID
	int32 equipPos=2;	// 装备位置ID
}

message EquipOffAck {
}


message WorldChatReq {
	int64 destId = 1;// 角色id(0:广播)
	string msg = 2; // 聊天内容
}

message WorldChatAck {
	string errorMsg=1;
}

message ChatRoleInfo {
	int64 roleId =1;//
	int32 characterId=2; // 主角id
	string roleName = 3;// 角色名
}

message MessageInfo {
	ChatRoleInfo srcRole =1;
	ChatRoleInfo destRole = 2;// 为空就是广播
	string msg =3; // 聊天内容
	int64 dateTime=4;// 时间
}

message WorldChatNtf {
	repeated MessageInfo msgs=1;
}

enum NoticeReason {
	NR_GM_TOOL=0;// GM
	NR_SERVER_KICK=1;
}

message SysNotice {
	int32 id =1;
	string msg =2; // 公告内容
	NoticeReason nr=3;

	int32 tempId=4;//模板id
	repeated string tempParams=5; // 模板参数
	// 下面是一些时间规则
	int32 level=6; // 显示等级
	int32 time=7; // 显示时间
}

message SysNoticeNtf {
	repeated SysNotice notices=1;
}

enum TopNType{
	TNT_SCENE=0; // 场景关卡排行
	TNT_LEVEL=1; // 角色等级排行
}

// 战斗技能
message BattleSkill{
	int32 skillId = 1;		// 技能模板ID
	int32 level = 2;		// 技能等级
}

// 战斗英雄
message BattleHero{
	int32 heroId = 1;		// 英雄模板ID
	repeated BattleSkill skills=3; // 战斗技能
}

message SceneTopN {
	int32 id =1; // 关卡id

	int64 roleId=2;
	string roleName=3;
	string avatar = 4;	// player表id
	int32 roleLevel = 5; // 玩家等级

	int32 time=6;    // 多长时间通过
	int64 power=7; // 战力

	repeated BattleHero heros=8;
}

message LevelTopN {
	int64 roleId =1; // 关卡id
	string roleName=2;
	int32 level=3; // 等级
}

message TopNListReq{
	TopNType tnt=1; //排行榜类型
}

message TopNListAck{
	repeated SceneTopN scenes=1;
	repeated LevelTopN levels=2;
}


// 锻造请求
message EquipForgeReq{
	int32 equipId = 1;	// 装备实例ID
	int32 slot = 2;		// 装备槽位
}

message EquipForgeAck{
	int32 equipId = 1;	// 装备实例ID(拆分，如果不需要拆分，则原装备实例ID)
}

// 锻造技能释放
message EquipForgeSkillReq{
	int32 skillId = 1;	// 锻造技能ID
}

message EquipForgeSkillAck{
	EquipForgeRes result = 1;
}

// 锻造技能提交
message EquipForgeSubmitReq{
	int32 equipId = 1;	// 装备实例ID
	int32 slot = 2;		// 装备槽位
	int32 opt = 3;		// 0 放弃，1 保存
}

message EquipForgeSubmitAck{
}


// 锻造中断缓存，重新登录下发
message EquipForgeRecNtf{
	EquipForgeRec rec = 1;
}


message SceneProcReq {
}

message SceneProcAck {
	float proc=1;//关卡进度百分比
	SceneTopN topn=2; // 领跑者
}

// 新加入剧情展示
message NpcPvOpenReq {
	int32 id = 1; // npcID
}

message NpcPvOpenAck {
}

// 抚摸Npc
message TouchNpcReq {
	int32 id = 1; // npcID
}

message TouchNpcAck {
}

// 进行一次抽技能 （作废）
message RollSkillReq {
	int32 mode = 1; // 模式 参考 SkillGachaMode.xlsx ID列 1金币 2钻石
	int32 count = 2; // 抽取数量 参考SkillGachaMode.xlsx Times列 可选次数 一般是1和10
}
message RollResInfo {
	int32 itemCfgId = 1; //Config Id 参考Item.xlsx
	int32 count = 2; //数量
}
// （作废）
message RollSkillAck {
	repeated RollResInfo results = 1;  //抽取出来的技能Item
}

//进行抽卡
message RollReq {
    int32 type   = 1; //1-基础角色池 2-基础技能池
    int32 funcId = 2; //卡池编号
	int32 count  = 3; //抽取次数
}
message RollAck {
	repeated RollResInfo results = 1;  //抽取出来的技能Item
}

// 获得抽取界面的信息
message RollInfoReq {
    int32 type = 1; //1-基础角色池 2-基础技能池
	int32 funcId = 2; //卡池编号
}
message RollInfoAck {
	repeated int32 leftAsrTimes = 1; //再抽几次必出保底（作废）
	int32 leftFreeTime = 3; //倒计时还有多少毫秒免费（作废）
	int32 isHalfPrice = 4; //当前单抽是否为半价（作废）

	int32 todayRollTimes    = 2; //今日已经抽取的次数
	int32 hasRollTimeNotSSR = 6; //未抽取到SSR的次数
	int32 leftTimesFloor    = 7; //还差多少次可以抽到保底品质
  int32 totalRollTimes    = 8; //总抽取次数
}

// （作废 目前无此需求）
message RollRecordInfo {
	int64 time = 1; // unix时间 毫秒
	int32 cfgId = 2; //抽取物品ID
}
// 获取抽取记录（作废 目前无此需求）
message RollRecordReq {
}
// （作废 目前无此需求）
message RollRecordAck {
	repeated RollRecordInfo rcds = 1;
}


// 朋友圈与营地信件，根据EventId + triggerTime排序
message InteractionInfo{
	int32 EventId=1;		// 事件ID
	int32 interactionId=2;	// 实例ID,唯一索引
	uint32 configId=3;		// 模板ID,引用AIInteraction表
	int64 triggerTime=4;	// 触发时间
	uint32 replyId=5;		// 回复ID,应用AIInteractionRep表
	int64 replyTime=6;		// 回复时间
	int64 awardTime=7;		// 领奖时间
	int64 openTime=8;		// 打开时间(红点标记)
	int32 flagId=9;			// 玩家标记
	int64 flagTime=10;		// 玩家标记时间
}

// 通知新交互触发或变更
message InteractionInfoNtf{
	repeated InteractionInfo infos=1;
}

// 交互回复请求
message InteractionReplyReq{
	uint32 interactionId=1;
	int32 type=2;		// 类型: 1.朋友圈 2.营地信件
	int32 opt=3;		// 操作：0.打开 1.回答 2.收取奖励 3.玩家标记
	uint32 replyId=4;	// 回复ID
	int32 flagId=5;		// 玩家标记
}

// 交互回复响应
message InteractionReplyAck{
	uint32 interactionId=1;	// 交互ID
	InteractionInfo info=2;	// 交互信息，用于刷新客户端
}

// 装备分解
message DecomposeInfo{
	uint32 equipId=1; //装备的堆叠ID
	uint32 count=2; //要分解的数量
}

message EquipDecomposeReq{
	repeated DecomposeInfo equips=1;
}

message EquipDecomposeAck{
	repeated DecomposeInfo equips=1;
	repeated ItemInfo materials=2;
}

// 装备合成
message EquipComposeReq{
	uint32 manufactureId = 1; //配方ID ManufactureConfig -> ID
	uint32 count = 2; //合成次数
}

// 装备分解
message EquipComposeAck{
}


// 任务进度保存
message ClientRecord{
    map<int32,int32> functionPV = 1;//解锁功能用
	map<int32,int32> functionRedDot = 2;//解锁红点
	map<string,int32> guideGroups = 3;//已经进行过的引导组
	uint32 playerFightLv = 4; //玩家挑战过关卡id
	uint32 playerShowOpenArea = 5; //玩家世界地图看到的解锁区域id
	bool firstTenDraw = 6; //是否第一次进行过十连抽
	uint32 playerShowOpenSubArea = 7; //玩家区域地图看到的解锁小区域id
}

message TaskRecordSaveReq{
	ClientRecord clientRecord = 1;
}

message TaskRecordSaveAck{
}

// 登录时任务进度通知
message NotifyTaskRecord{
	ClientRecord clientRecord = 1;
}

// 营地野外强制切换
message ForceHomelandReq{
	bool homeland=1; // 0营地，1野外
}

message ForceHomelandAck{
	bool homeland=1; // 0营地，1野外
}

message HomelandChangeNtf{
	bool homeland=1;	// 0营地，1野外
	bool force=2;		// 是否手工切换
}

// 任务奖励打开
message TaskAwardReq{
	int32 taskId=1;
}

message TaskAwardAck{
	int32 taskId=1;
	repeated ItemInfo awards=2;
}

// 赛季信息
enum SeasonRewardState {

	SEASON_RWD_NOT_EXIST = 0;  // 不存在
	SEASON_RWD_RUNNING = 1;  //  正在跑
	SEASON_RWD_CAN_TAKE = 2;  // 待领取
	SEASON_RWD_HAS_TAKE = 3;  // 已领取
	SEASON_RWD_NOT_START = 4;   // 赛段未开始
}

// 当前赛季
message SeasonStateNtf {
	int64 seasonTick = 1; // 步骤时间戳，0:关闭ICON
	bool seasonEnd=2; // 等待开始
	bool needReward =3; // 领奖
}

message SeasonStepInfo {
	int32 step = 1; //赛段步骤[0,1,2]
	float proc = 2; //进度
	SeasonRewardState rwdSt = 3; //奖励状态
}

//获得当前赛季信息
message SeasonStateReq {
}

message SeasonStateAck {
	int32 seasonId = 1; //赛季的ID
	int32 nextSeasonId=2;
	repeated SeasonStepInfo stepInfos = 3; //步骤信息
}

message SeasonReward {
	int32 step=1; //属于哪个阶段的奖励 [0,1,2]
	int32 itemCfgId = 2; //Config Id 参考Item.xlsx
	int32 count = 3; //数量
}

//领取奖励
message GetSeasonRewardReq {
}

message GetSeasonRewardAck {
	repeated SeasonReward rwds = 1; //领到的奖励
}

message SaveTeamReq {
	int32 teamType=1;
	repeated int32 heros=2;
}

message SaveTeamAck {
}

message SetFollowHeroReq{
	int32 hero=1;//0-取消  非0设置
}
message SetFollowHeroAck {
}

// 禁止类型
enum ForbiddenType {
	FORBIDDEN_NONE = 0;		// 无类型
	FORBIDDEN_LOGIN = 1; 	// 禁登/解禁
	FORBIDDEN_CHAT = 2; 	// 禁言/解禁
}

message ForbiddenChat{
	int64 ForbiddenBeginTime=1;	// 禁言开始时间
	int64 ForbiddenEndTime=2;	// 禁言结束时间
	string ForbiddenMsg=3;		// 禁言内容
}

message ForbiddenNtf
{
	ForbiddenType FBtype = 1;		// 禁止类型
	ForbiddenChat FBChatInfo = 2;	// 禁言/解禁言
}

// ===============功能解锁

enum FuncState
{
    FS_CLOSE   = 0; //默认关闭
    FS_APPEAR   = 1; //可见
    FS_UNLOCK   = 2;  //解锁
}

message UnlockFuncInfo
{
    uint32 id = 1;   //功能id
    FuncState state = 2;
    int64  state_val  = 3;  //值
}

message UnlockIDsNtf
{
	bool isAll=1;			// 是否全同步 true全同步 false增量同步
	repeated UnlockFuncInfo funcs=2;	// 已解锁的列表
}

// ================角色觉醒相关
message CharEnhanceInfoReq
{
	int32 heroId = 1; //需要查看哪个角色的ID 唯一ID 并非cfgId
}
message CharEnhanceInfoAck
{
	PropertyList attrs = 1; //以ATTR_TYPE为顺序的属性列表 [NONE,HPMAX,ATK,DEF...]
	PropertyList attrsNext = 2; //下一次的觉醒属性预测 如果长度为0则表示没有下一阶段的觉醒了
}

message CharEnhanceEnhanceReq
{
	int32 heroId = 1; //哪个角色的ID进行觉醒 唯一ID 并非cfgId
}

message CharEnhanceEnhanceAck
{
	PropertyList attrs = 1; //以ATTR_TYPE为顺序的属性列表 [NONE,HPMAX,ATK,DEF...] 觉醒结果
	PropertyList attrsNext = 2; //下一次的觉醒属性预测 如果长度为0则表示没有下一阶段的觉醒了
}

// ================契约升级
message HeroContractUpReq
{
	int32 heroId = 1; //需要查看哪个角色的ID 唯一ID 并非cfgId
}
message HeroContractUpAck
{
}


// ==================物品使用相关
message ItemUseReq
{
	int32 itemId = 1; //物品的ID 是唯一ID 不是config ID
	int32 itemType = 2; //物品类型
	int32 count = 3; //物品数量 不可以超过该ID的堆叠数量
}
message ItemUseAck
{
	repeated ItemInfo items = 1; //使用物品后增加的物品序列 （作废）
	GainInfoNtf getItems = 2; //使用物品后增加的物品序列
}

// ==================伙伴升级
message FriendsLvUpReq
{
	int32 charid=1; // 唯一ID
	int32 level = 2; // 目标等级
}

message FriendsLvUpAck
{
	int32 charid=1;
	int32 newlevel=2;
	GainInfoNtf gain = 3;
}
// ==================支线任务相关
enum BranchTaskStateType {
	BRANCH_TASK_RUNNING = 0;  //正在进行
	BRANCH_TASK_REWARD = 1;  //完成待领取
	BRANCH_TASK_COMPLETE = 2;  //完成 当天领取数耗尽 不能领取
}

message QuestDetailInfo
{
	int32 conditionId = 1; //交互目标ID
	int32 count = 2; //交互数量
}

message CDKeyRewardReq
{
	string key =1;
}

message CDKeyRewardAck
{
	string error=2;
}

// 问卷奖励领取
message GetQuestionRwdReq
{
	int32 rwdCid = 1; //任务ID 唯一ID
}
message GetQuestionRwdAck
{

}

// PV播放记录
message SetPVHasPlayReq
{
}
message SetPVHasPlayAck
{
}

// 伙伴技能升级
message SecondSkillLvUpReq
{
	int32 heroid = 1; 	// 角色实例ID
	int32 skillcid = 2;	// 技能模板ID
}
message SecondSkillLvUpAck
{
	int32 heroid = 1;       // 角色实例ID
	int32 skillcid = 2;	// 技能模板ID
	int32 newlv = 3;	// 技能等级
}

// 伙伴晋升
message UpHeroQualityNtf
{
	int32 heroid = 1; // 角色实例ID
    bool  isup = 2;   // 是否升级 true:升级 false:分解
	int32 cfgid = 3;  // 升级之前player配置ID
}

message RoleAddPropReq
{
	int32 heroID= 1;//伙伴唯一id
	PropertyList prop = 2;
}
message RoleResetPropReq
{
	int32 heroID= 1;//伙伴唯一id
}
message HeroInfoNtf
{
	CharInfo char =1;//单独更新伙伴
}

// ================关卡星级
message BattleStar
{
	int32 level = 1;
	int32 star = 2;
}
message BattleStarNtf
{
	repeated BattleStar stars = 1;
}
message BattleStarRewardReq
{
	uint32 areaID = 1;//区域id，必填
	uint32 opt = 2;//0-请求星级奖励领取进度，1-4请求领取对应奖励
}
message BattleStarRewardAck
{
	uint32 areaID = 1;//区域id，必填
	int32 result = 2;//领取进度，按位表示：0x1第一位，0x2第二位
	GainInfoNtf gain = 3;
}

// ================快速战斗
message FastBattleReq
{
	uint32 opt = 1;//0-请求快速战斗面板信息, 1-进行快速战斗操作
}
message FastBattleAck
{
	uint32 freeNum = 1;//已进行的免费次数
	uint32 costNum = 2;//已进行的付费次数
	GainInfoNtf gain = 3;
}
// ================快速探索
message FastSearchReq
{
	uint32 id = 1;
	uint32 count = 2;
}
message FastSearchAck
{
	GainInfoNtf gain = 3;
}
// ================印记
message ImprintEquipReq
{
	uint32 heroID = 1;//hero的唯一id
	uint32 equipPos = 2;//范围0-5
	uint32 equipID = 3;//装备唯一id
}
message ImprintEquipAck
{
}
message ImprintLevelUpReq
{
	uint32 heroID = 1;//hero的唯一id
}
message ImprintLevelUpAck
{
}
// ================装备槽位
message TeamPosEquip
{
	uint32 level = 1;//强化等级
	uint32 equipID = 2;//装备id
}
message TeamPosData
{
	uint32 id = 1;//槽位id
	repeated TeamPosEquip equipPos = 2;//装备数据
}
//阵容数据
message FightHero
{
	uint32 hID = 1;//伙伴唯一id
	uint32 pos = 2;//槽位id,从1开始
	uint32 index = 3;//出战顺序,从0开始
}
message FightHeroTeam
{
	uint32 index = 1;
	repeated FightHero heros = 2;//伙伴
}
message TeamInfoReq
{

}
message TeamInfoAck
{
	repeated TeamPosData datas = 1;//槽位数据
	repeated FightHeroTeam fightHeros = 2;//阵容（目前只有一套，后续会支持多套）
}
message TeamEquipPosNtf
{
	TeamPosData data = 1;
}
message TeamHeroNtf
{
	FightHeroTeam data = 1;
}
message TeamEquipPosLvupReq
{
	uint32 id = 1;//槽位id
	uint32 equipPos = 2;//装备部位,取值1-6
}
message TeamEquipPosLvupAck
{
}
message TeamEquipPosPutEquipReq
{
	uint32 id = 1;//槽位id
	uint32 equipPos = 2;//装备部位,取值1-6
	uint32 equipID = 3;//装备唯一id
}
message TeamEquipPosPutEquipAck
{
}
message TeamPutHeroReq
{
	uint32 index = 1;//阵容index，从0开始
	uint32 id = 2;//槽位id，1被主角占用了，从2开始
	uint32 heroID = 3;//伙伴唯一id
}
message TeamPutHeroAck
{
}
message TeamFightHeroInfoReq
{
	uint32 index = 1;//阵容index，从0开始
}
message TeamFightHeroInfoAck
{

}
message SetFightTeamReq
{
	uint32 index = 1;//阵容index，从0开始
	uint32 fightIndex = 2;//战前布阵的孔位（不是槽位id）,从0开始
	uint32 heroID = 3;//伙伴唯一id
}
message SetFightTeamAck
{
}
// ================装备兑换
message EquipExchangeInfoReq
{	
}
message EquipExchangeItem
{
	uint32 itemID = 1;
	uint32 itemNum = 2;
	bool buyStatus =  3;//false-未购买，true-已购买
	int32 upperRate = 4;  //装备属性衰减值(随机数生成)
}
message EquipExchangeInfoAck
{	
	repeated EquipExchangeItem items = 1;//道具列表
	uint32 freeNum = 2;//已用免费刷新次数
	uint32 num = 3;//已用付费次数
}
message EquipExchangeBuyReq
{
	uint32 index = 1;//道具列表下标，从0开始
}
message EquipExchangeBuyAck
{

}
message EquipExchangeRefreshReq
{	
}
message EquipExchangeRefreshAck
{	
}
// ================商店
message ShopInfoReq
{
}
message CountProto
{
	uint32 id = 1;
	uint32 count = 2;
}
message ShopData
{
	repeated CountProto buyCount = 1;
}
message ShopInfoAck
{
	ShopData shopData = 1;
}
message ShopBuyReq
{
	uint32 id = 1;
	uint32 num = 2;
}
message ShopBuyAck
{

}
// ================咔嗒牌
message KataEquipInfoReq
{

}
message KataEquipInfoAck
{
	repeated uint32 equips = 1;
}
message KataPutEquipReq
{
	uint32 pos = 1;//0-8
	uint32 equipID = 2;//装备唯一id,为0代表脱
}
message KataPutEquipAck
{

}
message KataShopInfoReq
{

}
message KataShopItem
{
	uint32 itemID = 1;
	uint32 itemNum = 2;
	bool buyStatus =  3;//false-未购买，true-已购买
}
message KataShopInfoAck
{	
	repeated KataShopItem items = 1;//道具列表
	uint32 freeNum = 2;//已用免费刷新次数
	uint32 num = 3;//已用付费次数
	bool autoRefresh = 4;//是否自动刷新
}
message KataShopBuyReq
{
	uint32 index = 1;//道具列表下标，从0开始
	uint32 store = 2;//是否放仓库
}
message KataShopBuyAck
{

}
message KataShopRefreshReq
{	
}
message KataShopRefreshAck
{	
}
message KataShopAutoRefreshReq
{
	bool autoRefresh = 1;
}
message KataShopAutoRefreshAck
{

}
message KataMoveEquipReq
{
	uint32 itemID = 1;//唯一id
}
message KataMoveEquipAck
{	
}
//-----------------大地图过关信息--------------------
message ScenePassSkillInf
{
	int32 cfgid = 1; // 配置id
	int32 lvl = 2;	// 等级
}

// 过关英雄记录
message ScenePassHeroInf
{
	int32 cfgid = 1; // 配置id
	int32 lvl = 2; // 等级
	repeated ScenePassSkillInf skills=3; // 技能列表
	int32 enhancetimes = 4; // 觉醒次数
}

// 角色过关记录
message ScenePassLvlInf
{
	int64 roleid = 1; // 角色id
	int32 cfgid = 2; // 主角配置id
	int32 lvl = 3; // 等级
	int64 fightpower = 4; // 战力
	int64 datetime = 5; // 记录时间
	repeated ScenePassHeroInf heros = 6; // 英雄列表
	string rolename = 7; // 这个暂时没有改名，以后走缓存获取
}

enum SceneHisType
{
	SHT_LAST = 0; // 最近通关
	SHT_FIRST  = 1; // 首次通过
	SHT_POWER = 2; // 最低战力通过
}

message GetSceneHisReq
{
	int32 level = 1;
	SceneHisType type=2;
}

message GetSceneHisAck
{
	ScenePassLvlInf inf=1;
}

message ThiefInfo
{
	uint32 id =1; // 盗宝贼唯一id
	int32 cfgid = 2; // 配置id
	int32 beginTime = 3; //出现时间
	string pos = 4; //出现位置
    bool explore = 5;//是否探索过
}

message ThievesInfoNtf {
    repeated ThiefInfo thieves = 1; // 列表
}

message SetThiefPosReq {
    int32 id = 1;
    string pos = 2; //出现位置
    bool explore = 3;//探索
}

message SetThiefPosAck {
}

message SetHangupReq {
    bool hangup=1;
}

message SetHangupAck {
}
//---------------------------------------------





//=====================赛季--S==============================
enum  e_season_stage {
	e_season_race =0 ;//竞赛期
	e_season_pass =1 ;//休赛期
	e_season_none =2 ;//无赛季

}

// 奖励状态
enum SeasonAwardState {
    e_state_none = 0;// 不可领取
    e_state_get = 1; // 可领取
    e_state_got = 2; // 已领取
};
// 竞赛期阶段奖励详情
message SeasonAward {
    SeasonAwardState state = 1;     // 领取状态
    int32 award_idx = 2;          // 奖励档次(据配表顺序, 0、1、2....)
    int32 range = 3;          // 奖励档次对应的领先百分比（99 95）
	int32 stage = 4;	      // 竞赛期奖励阶段，从0开始（0，1，2）
	repeated ItemInfo aword_items = 5;  //阶段奖励内容(只有当state=2时才会有)
}

// 竞赛期详情
message RaceSeasonDetail {
    repeated SeasonAward race_award_stages  = 1;//竞赛期各阶段奖励状态
}

// 休赛期任务
message PassSeasonQuest {
    // 父任务
    int32 type = 1;         // 据配表, 1:日任务， 2:周任务 3:休赛期任务
    int32 cur_progress = 2; // 当前进度，达成次数
    int32 total_quantity = 3;// 任务总量

    // 当前进行中的子任务, 系统随机选择
    repeated PassSeasonSubQuest cur_sub_quest = 4;
}

// 休赛期任务的子任务。
message PassSeasonSubQuest {
    int32 id = 1;               // 任务ID(配置文件中的任务ID)
    int32 cur_progress = 2;     // 当前进度
    int32 total_quantity = 3;   // 任务总量
    int32 award_exp = 4;        // 任务奖励(经验)
    int32 complete_condition = 5;// 完成条件
}

// 休赛期，bp 升级奖励状态
message PassSeasonAwardStatus {
    SeasonAwardState free_award_state = 1;// 免费奖励状态
    SeasonAwardState paid_award_state = 2;// 收费奖励状态
	repeated ItemInfo free_items = 3; 	//免费奖励内容
	repeated ItemInfo paid_items = 4; 	//付费奖励内容
};

// 休赛期详情
message PassSeasonDetail {
    int32 bp_type   = 1;    //战令品阶
    int32 bp_level  = 2;    //战令等级
    int32 bp_exp    = 3;    //当前经验
    bool paid_pb    = 4;    // false: 战令未进阶, true: 战令进阶
    repeated PassSeasonAwardStatus award_status_list = 6;   // 奖励状态
}

// 随从详情
message HeroDetail {
    int32 hero_id = 1;
    int32 quality = 2;      //品质
    int32 star_level =3;    //星级
}

// 播报类型
enum SeasonReportType {
    e_top_level = 0;    // 进度
    e_most_level = 1;   // 当日推关最多
};

message ReportUserInfo {
    string nick_name = 1;
    repeated HeroDetail hero_list = 2;  // 随从详情
}

// 每日播报详情
message ReportDetail {
    SeasonReportType type = 1;
    int32 val = 2;  // 据 type 展示, 例子: 昨日共推val关
    ReportUserInfo userinfo = 3;
}

//请求个人赛季情况
message GetUserSeasonInfoReq {
	// int64 roleid	= 1;	//角色ID
	// int32 serverid	= 2;	//分支服ID
}

message GetUserSeasonInfoAck {
	int32 seasonid 			= 1; //赛季ID（RaceSeason表中的ID）
	e_season_stage  stage 	= 2; //当前赛季阶段（竞赛期/休赛期）


	int32 cur_season_start_time = 3;  //赛季开启时间戳
	int32 cur_season_switch_time = 4; //赛季阶段切换时间戳(从竞赛期-->切换到休赛期)
	int32 cur_season_end_time = 5;  //赛季结束时间戳
	int32 level	= 6;//关卡进度
    int32 cur_rank = 7;//当前排名, 超过 cur_rank/100 的玩家

    RaceSeasonDetail race_season_detail = 8; //竞赛期详情, 在休赛期时需要回看，所以该字段必须填充。
    PassSeasonDetail pass_season_detail = 9;//休赛期详情, 在竞赛期需要看预期 bp 品阶，所以需要填充 bp 品阶。
	bool  stage_show_tag =10;	//赛季阶段开启动画是否展示
	bool  lock =11;				//通知客户端是否展示赛季入口 true:展示  false:不展示
}

// 请求领取奖励
enum AwardType {
    e_type_pass_season = 0;// 休赛期领取
    e_type_race_season_stage = 1;// 竞赛期结算奖励
}

//休赛期奖励类型
enum BPAwardType {
	e_type_award_none = 0;//废弃不用
    e_type_award_free = 1;// 免费
    e_type_award_paid = 2;// 付费
}

message GetSeasonAwardReq {
    AwardType type = 1; // 请求领取的奖励类型
    int32     stage = 2; //竞赛期专用-- 如果是竞赛季，传递需要领奖的阶段， 0 起

	int32     bp_level =3; //休赛期专用-- 休赛期战令等级
	BPAwardType bp_award_type = 4;//休赛期专用--休赛期奖励类型
}

// 请求领取奖励返回
message GetSeasonAwardAck {
    //判断错误码
}

// 策划案的功能描述是"获得经验", 实际上是返回休赛任务状态
message GetPassSeasonQuestStatusReq {
}

message GetPassSeasonQuestStatusAck {
    repeated PassSeasonQuest season_quest_list = 1;     // 休赛期任务
}

// 支付用途
enum SeasonPayType {
    e_pay_bp = 0;           // 购买付费战令
    e_pay_upgrade_bp = 1;   // 付费升级战令
}

// 请求购买付费战令
message PayForSeasonReq {
    SeasonPayType p_type = 1;
    uint32 wanted_level = 2; //如果是升级的话，设置此字段
}

// 请求购买付费战令返回
message PayForSeasonAck {
    // 判断错误码
    // 如需返回更多信息，找接口人
    SeasonPayType p_type = 1;
    uint32 new_bp_level = 2;    // 如果升级成功，返回新的等级
}

// 请求每日播报
message SeasonDailyReportReq {

}

// 赛季每日播报
message SeasonDailyReport{
    repeated ReportDetail report_list = 1;
}

// 完成任务
message CompleteSeasonQuestReq {
    int32 complete_condition = 1; // 据配表，填充对应的完成类型
    int32 complete_quantity = 2; // 完成次数
}

message CompleteSeasonQuestAck {
}

// 推送新的赛季奖励状态
message NewSeasonAwardStatusNtf {
    // 按需选用
    repeated SeasonAward race_award_stages  = 1;//竞赛期各阶段奖励状态
    repeated PassSeasonAwardStatus pass_award_levels = 2;   // 休赛期各等级奖励状态
}

//请求赛季榜单
message GetSeasonRankReq {
}

message GetSeasonRankAck {
	int32 level	= 1;//关卡进度
    int32 cur_rank = 2;//当前排名,万分比
}

//=====================赛季--E==============================


//=====================任务--S==============================
message TaskInfo {
	int32 id           = 1;   //任务唯一ID 发送其他任务流程消息时需要指定该ID
	int32 root_cid     = 2;   //父任务配置ID
	int32 sub_cid      = 3;   //子任务配置ID
	int32 state        = 4;   //任务状态
	int32 progress     = 5;   //任务进度
	int32 step         = 6;   //客户端步骤
}

//登录时发送
message TaskLoginNtf {
	repeated TaskInfo mainList = 1; //主线任务
	repeated TaskInfo autoList = 2; //挂机任务
}

//领取任务
message TaskAccpetReq {
	int32 id = 1; //要进行哪个ID的领取
}
message TaskAccpetAck {
	TaskInfo task = 1; //领取的任务
}

//追加任务进度
message TaskAddProgressReq {
	int32 id = 1; //要进行哪个任务的进度追加
	int32 addcount = 2; //追加数量 至少为1 发<=0的数字视作发1
}
message TaskAddProgressAck {
	TaskInfo task = 1; //追加过的任务
}

//设置步骤
message TaskAddStepReq {
	int32 id = 1; //要进行哪个任务的步骤设置
}
message TaskAddStepAck {
	TaskInfo task = 1; //追加过的任务
}


//领取任务奖励
message TaskTakeRewardReq {
	int32 id = 1; //要进行哪个任务的奖励领取
}
message TaskTakeRewardAck {
	TaskInfo task = 1; //领取过的任务
	TaskInfo newTask = 2; //该任务消失后新出现的任务
	GainInfoNtf gain = 3; 	//完成任务获得的奖励
}

//重置放置任务
message TaskResetAutoTaskReq {
}
message TaskResetAutoTaskAck {
	repeated TaskInfo autoList = 2; //挂机任务
}

//=====================任务--E==============================






